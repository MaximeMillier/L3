/**
 */
package tpNoteActivity.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tpNoteActivity.util.TpNoteActivityAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TpNoteActivityItemProviderAdapterFactory extends TpNoteActivityAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TpNoteActivityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Chambre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChambreItemProvider chambreItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Chambre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChambreAdapter() {
		if (chambreItemProvider == null) {
			chambreItemProvider = new ChambreItemProvider(this);
		}

		return chambreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.SalleDeBain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SalleDeBainItemProvider salleDeBainItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.SalleDeBain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSalleDeBainAdapter() {
		if (salleDeBainItemProvider == null) {
			salleDeBainItemProvider = new SalleDeBainItemProvider(this);
		}

		return salleDeBainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Cuisine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CuisineItemProvider cuisineItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Cuisine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCuisineAdapter() {
		if (cuisineItemProvider == null) {
			cuisineItemProvider = new CuisineItemProvider(this);
		}

		return cuisineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Salon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SalonItemProvider salonItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Salon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSalonAdapter() {
		if (salonItemProvider == null) {
			salonItemProvider = new SalonItemProvider(this);
		}

		return salonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Dort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DortItemProvider dortItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Dort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDortAdapter() {
		if (dortItemProvider == null) {
			dortItemProvider = new DortItemProvider(this);
		}

		return dortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.SeReveille} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeReveilleItemProvider seReveilleItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.SeReveille}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeReveilleAdapter() {
		if (seReveilleItemProvider == null) {
			seReveilleItemProvider = new SeReveilleItemProvider(this);
		}

		return seReveilleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Douche} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoucheItemProvider doucheItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Douche}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoucheAdapter() {
		if (doucheItemProvider == null) {
			doucheItemProvider = new DoucheItemProvider(this);
		}

		return doucheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.PrepareOmelette} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrepareOmeletteItemProvider prepareOmeletteItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.PrepareOmelette}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrepareOmeletteAdapter() {
		if (prepareOmeletteItemProvider == null) {
			prepareOmeletteItemProvider = new PrepareOmeletteItemProvider(this);
		}

		return prepareOmeletteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.PrepareLard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrepareLardItemProvider prepareLardItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.PrepareLard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrepareLardAdapter() {
		if (prepareLardItemProvider == null) {
			prepareLardItemProvider = new PrepareLardItemProvider(this);
		}

		return prepareLardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Boire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoireItemProvider boireItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Boire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoireAdapter() {
		if (boireItemProvider == null) {
			boireItemProvider = new BoireItemProvider(this);
		}

		return boireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Etirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EtirementItemProvider etirementItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Etirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEtirementAdapter() {
		if (etirementItemProvider == null) {
			etirementItemProvider = new EtirementItemProvider(this);
		}

		return etirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.preparerAssiete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected preparerAssieteItemProvider preparerAssieteItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.preparerAssiete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createpreparerAssieteAdapter() {
		if (preparerAssieteItemProvider == null) {
			preparerAssieteItemProvider = new preparerAssieteItemProvider(this);
		}

		return preparerAssieteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ReciterProgramme} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReciterProgrammeItemProvider reciterProgrammeItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ReciterProgramme}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReciterProgrammeAdapter() {
		if (reciterProgrammeItemProvider == null) {
			reciterProgrammeItemProvider = new ReciterProgrammeItemProvider(this);
		}

		return reciterProgrammeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.Profite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfiteItemProvider profiteItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.Profite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfiteAdapter() {
		if (profiteItemProvider == null) {
			profiteItemProvider = new ProfiteItemProvider(this);
		}

		return profiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.BrosseLesDents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrosseLesDentsItemProvider brosseLesDentsItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.BrosseLesDents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrosseLesDentsAdapter() {
		if (brosseLesDentsItemProvider == null) {
			brosseLesDentsItemProvider = new BrosseLesDentsItemProvider(this);
		}

		return brosseLesDentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tpNoteActivity.PrendreBus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrendreBusItemProvider prendreBusItemProvider;

	/**
	 * This creates an adapter for a {@link tpNoteActivity.PrendreBus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrendreBusAdapter() {
		if (prendreBusItemProvider == null) {
			prendreBusItemProvider = new PrendreBusItemProvider(this);
		}

		return prendreBusItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (activityItemProvider != null)
			activityItemProvider.dispose();
		if (chambreItemProvider != null)
			chambreItemProvider.dispose();
		if (salleDeBainItemProvider != null)
			salleDeBainItemProvider.dispose();
		if (cuisineItemProvider != null)
			cuisineItemProvider.dispose();
		if (salonItemProvider != null)
			salonItemProvider.dispose();
		if (dortItemProvider != null)
			dortItemProvider.dispose();
		if (seReveilleItemProvider != null)
			seReveilleItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (doucheItemProvider != null)
			doucheItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (prepareOmeletteItemProvider != null)
			prepareOmeletteItemProvider.dispose();
		if (prepareLardItemProvider != null)
			prepareLardItemProvider.dispose();
		if (boireItemProvider != null)
			boireItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (etirementItemProvider != null)
			etirementItemProvider.dispose();
		if (preparerAssieteItemProvider != null)
			preparerAssieteItemProvider.dispose();
		if (reciterProgrammeItemProvider != null)
			reciterProgrammeItemProvider.dispose();
		if (profiteItemProvider != null)
			profiteItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (brosseLesDentsItemProvider != null)
			brosseLesDentsItemProvider.dispose();
		if (prendreBusItemProvider != null)
			prendreBusItemProvider.dispose();
	}

}
